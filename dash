#!/usr/bin/env python3
"""
Dashboard management CLI - build, create, and update Glassnode dashboards

Usage:
    # Build a dashboard from a configuration file
    ./dash build configs/sol_futures.json
    
    # Build all dashboards in a directory
    ./dash build configs/examples/
    
    # Create a new dashboard on Glassnode
    ./dash create dashboards/sol_futures_dashboard.json
    
    # Create all dashboards in a directory
    ./dash create dashboards/examples/
    
    # Update an existing dashboard on Glassnode (with UUID)
    ./dash update 29da04cd-1c9a-40a1-76e1-7df6faaf0a6a dashboards/sol_futures_dashboard.json
    
    # Update an existing dashboard (auto-lookup UUID from config)
    ./dash update configs/sol_futures.json
    
    # Update all dashboards in a directory
    ./dash update configs/examples/
    ./dash update dashboards/examples/
"""
import argparse
import sys
import json
from pathlib import Path

from dashboard_builder import build_dashboard_from_file, build_dashboards_from_directory
from dashboard_client import (
    create_dashboard, update_dashboard, create_dashboards, update_dashboards,
    load_mappings, save_mapping, MAPPINGS_FILE
)


def config_to_dashboard_path(config_path):
    """Convert config path to dashboard path."""
    config_path = Path(config_path)
    output_name = config_path.stem + "_dashboard.json"
    return Path(str(config_path.parent).replace("configs", "dashboards", 1)) / output_name


def dashboard_to_config_path(dashboard_path):
    """Convert dashboard path to config path."""
    dashboard_path = Path(dashboard_path)
    config_name = dashboard_path.stem.replace("_dashboard", "") + ".json"
    return str(Path(str(dashboard_path.parent).replace("dashboards", "configs", 1)) / config_name)


def build_and_save_dashboard(config_path):
    """Build dashboard from config and save to file. Returns the dashboard path."""
    dashboard = build_dashboard_from_file(config_path)
    output_path = config_to_dashboard_path(config_path)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, "w") as f:
        json.dump(dashboard.model_dump(exclude_none=True), f, indent=2)
    
    return output_path, dashboard


def cmd_build(args):
    """Build dashboard JSON from config file or directory"""
    try:
        import json
        from pathlib import Path
        
        config_path = Path(args.config)
        
        if config_path.is_dir():
            # Batch build using the new function
            dashboards = build_dashboards_from_directory(config_path)
            
            built_count = 0
            for file_path, dashboard in dashboards.items():
                # Generate output path
                output_path = config_to_dashboard_path(file_path)
                
                # Create parent directories if they don't exist
                output_path.parent.mkdir(parents=True, exist_ok=True)
                
                # Save dashboard
                with open(output_path, "w") as f:
                    json.dump(dashboard.model_dump(exclude_none=True), f, indent=2)
                
                print(f"✓ Dashboard built: {output_path}")
                print(f"  Name: {dashboard.meta.name}")
                print(f"  Metrics: {len(dashboard.configs)}")
                built_count += 1
            
            print(f"\n✓ Built {built_count} dashboards from {config_path}")
        else:
            # Single file build
            output_path, dashboard = build_and_save_dashboard(args.config)
            
            print(f"✓ Dashboard built: {output_path}")
            print(f"  Name: {dashboard.meta.name}")
            print(f"  Metrics: {len(dashboard.configs)}")
    except Exception as e:
        print(f"✗ Build failed: {e}")
        sys.exit(1)


def cmd_create(args):
    """Create new dashboard(s) on Glassnode"""
    try:
        dashboard_path = Path(args.file)
        
        if dashboard_path.is_dir():
            # Batch create
            responses = create_dashboards(dashboard_path)
            
            created_count = 0
            mappings = load_mappings()
            
            for file_path, response in responses.items():
                if response.status_code == 200 and response.json().get('uuid'):
                    uuid = response.json()['uuid']
                    
                    # Derive config path from dashboard path
                    config_path = dashboard_to_config_path(file_path)
                    
                    mappings[config_path] = uuid
                    created_count += 1
                    print(f"  UUID: {uuid} → {config_path}")
            
            # Save all mappings at once
            with open(MAPPINGS_FILE, "w") as f:
                json.dump(mappings, f, indent=2)
            
            print(f"\n✓ Created {created_count} dashboards from {dashboard_path}")
        else:
            # Single file create
            response = create_dashboard(args.file)
            print(f"✓ Dashboard created (status: {response.status_code})")
            
            if response.json() and response.json().get('uuid'):
                uuid = response.json()['uuid']
                print(f"  UUID: {uuid}")
                
                # Derive config path from dashboard path
                config_path = dashboard_to_config_path(dashboard_path)
                
                # Save mapping
                save_mapping(config_path, uuid)
                print(f"  Saved mapping: {config_path} → {uuid}")
    except Exception as e:
        print(f"✗ Create failed: {e}")
        sys.exit(1)


def cmd_update(args):
    """Update existing dashboard(s) on Glassnode"""
    try:
        path = Path(args.uuid)  # First arg could be UUID, config path, or directory
        
        # Check if it's a directory (batch update)
        if path.is_dir():
            # Could be configs or dashboards directory
            if "configs" in str(path):
                # Build dashboards first
                dashboards = build_dashboards_from_directory(path)
                
                for file_path in dashboards:
                    build_and_save_dashboard(file_path)
                
                # Now update using the dashboards directory
                dashboard_dir = Path(str(path).replace("configs", "dashboards", 1))
                responses = update_dashboards(dashboard_dir)
            else:
                # Assume it's a dashboards directory
                responses = update_dashboards(path)
            
            updated_count = sum(1 for r in responses.values() if r.status_code == 200)
            print(f"\n✓ Updated {updated_count} dashboards")
            
        elif args.file:
            # Traditional: uuid + dashboard file
            uuid = args.uuid
            dashboard_file = args.file
            
            response = update_dashboard(uuid, dashboard_file)
            print(f"✓ Dashboard updated (status: {response.status_code})")
            
            # Save mapping
            dashboard_path = Path(dashboard_file)
            config_path = dashboard_to_config_path(dashboard_path)
            save_mapping(config_path, uuid)
            
        else:
            # Single config path - lookup UUID
            config_path = args.uuid  # First arg is actually config path
            mappings = load_mappings()
            
            if config_path not in mappings:
                print(f"✗ No dashboard UUID found for {config_path}")
                print("  Create a dashboard first with: ./dashboard create")
                sys.exit(1)
            
            uuid = mappings[config_path]
            
            # Build and update
            dashboard_path, _ = build_and_save_dashboard(config_path)
            
            response = update_dashboard(uuid, dashboard_path)
            print(f"✓ Dashboard updated (status: {response.status_code})")
            print(f"  UUID: {uuid}")
            
    except Exception as e:
        print(f"✗ Update failed: {e}")
        sys.exit(1)


def main():
    parser = argparse.ArgumentParser(
        description="Dashboard management tool for building and deploying Glassnode dashboards"
    )
    subparsers = parser.add_subparsers(dest="command", help="Command to run")
    
    # Build command
    build_parser = subparsers.add_parser("build", help="Build dashboard JSON from config file or directory")
    build_parser.add_argument("config", help="Config file or directory path (e.g., configs/sol_futures.json or configs/examples/)")
    
    # Create command
    create_parser = subparsers.add_parser("create", help="Create new dashboard(s) on Glassnode")
    create_parser.add_argument("file", help="Dashboard JSON file or directory (e.g., dashboards/sol_futures_dashboard.json or dashboards/examples/)")
    
    # Update command
    update_parser = subparsers.add_parser("update", help="Update existing dashboard(s) on Glassnode")
    update_parser.add_argument("uuid", help="Dashboard UUID, config file/directory, or dashboards directory")
    update_parser.add_argument("file", nargs='?', help="Dashboard JSON file (optional if using config path)")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # Dispatch to command handler
    if args.command == "build":
        cmd_build(args)
    elif args.command == "create":
        cmd_create(args)
    elif args.command == "update":
        cmd_update(args)


if __name__ == "__main__":
    main()